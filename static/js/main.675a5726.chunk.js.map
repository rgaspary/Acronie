{"version":3,"sources":["emoji.js","App.js","serviceWorker.js","index.js"],"names":["Emoji","props","className","role","aria-label","label","aria-hidden","symbol","App","capitalizeFirstLetter","word","charAt","toUpperCase","slice","htmlFor","type","id","name","onClick","e","preventDefault","resultContainer","document","querySelector","innerHTML","classList","add","listContainer","createElement","appendChild","value","solution","length","split","forEach","letter","key","fetch","then","res","json","result","selected","data","max","randomNum","Math","floor","random","chosenWord","selectRandom","error","console","setTimeout","Object","keys","element","innerText","renderResults","remove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"uNAaeA,G,UAXD,SAAAC,GAAK,OACf,0BACIC,UAAU,QACVC,KAAK,MACLC,aAAYH,EAAMI,MAAQJ,EAAMI,MAAQ,GACxCC,cAAaL,EAAMI,MAAQ,QAAU,QAEpCJ,EAAMM,UCyEAC,MA7Ef,WAEE,SAASC,EAAsBC,GAC7B,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAyDnD,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,uCAAY,kBAAC,EAAD,CAAOK,OAAO,eAAKF,MAAM,mBACrC,oFACA,8CAAmB,kBAAC,EAAD,CAAOE,OAAO,eAAKF,MAAM,+BAE9C,0BAAMH,UAAU,YACd,2BAAOA,UAAU,kBAAkBY,QAAQ,mBAA3C,YACA,2BAAOC,KAAK,OAAOb,UAAU,kBAAkBc,GAAG,UAAUC,KAAK,YACjE,4BAAQf,UAAU,mBAAmBgB,QA/C3C,SAAuBC,GACrBA,EAAEC,iBAEF,IAEMC,EAAkBC,SAASC,cAAc,eAC/CF,EAAgBG,UAAY,GAC5BH,EAAgBI,UAAUC,IAAI,UAC9B,IAAMC,EAAgBL,SAASM,cAAc,MAC7CD,EAAcF,UAAUC,IAAI,yBAC5BL,EAAgBQ,YAAYF,GAC5B,IAEMjB,EAFOY,SAASC,cAAc,aACbA,cAAc,YACdO,MACjBC,EAAW,GAEbrB,GAAQA,EAAKsB,OAAS,IACHtB,EAAKuB,MAAM,IACnBC,SAAQ,SAACC,EAAQC,GAC5BC,MAAM,GAAD,OAhBM,sCAgBN,OAAaF,EAAb,MACJG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,IAAMxB,EAAI,iBAAamB,GACjBM,EAzChB,SAAsBC,GAAkB,IAAZC,EAAW,uDAAL,IAC1BC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMH,IAClDK,EAAaN,EAAKE,GAAWnC,KACnC,OAAOD,EAAsBwC,GAsCJC,CAAaT,GAC9BV,EAASd,GAAQyB,KAEnB,SAACS,GACCC,QAAQD,MAAMA,SAIpBE,YAAW,YA3Cf,SAAuBV,GAGrB,IADA,IAAMhB,EAAgBL,SAASC,cAAc,0BAC7C,MAAgB+B,OAAOC,KAAKZ,GAA5B,eAAmC,CAA9B,IAAIP,EAAG,KACJoB,EAAUlC,SAASM,cAAc,MACvC4B,EAAQ/B,UAAUC,IAAI,oBACtB8B,EAAQC,UAAYd,EAAKP,GACzBT,EAAcE,YAAY2B,IAoCPE,CAAc3B,KAAc,KAC/CV,EAAgBI,UAAUkC,OAAO,aAc/B,uBAEF,yBAAKzD,UAAU,wBCjED0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAAS8C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLC,QAAQD,MAAMA,EAAMwB,c","file":"static/js/main.675a5726.chunk.js","sourcesContent":["import React from 'react';\n\nconst Emoji = props => (\n    <span\n        className='emoji'\n        role='img'\n        aria-label={props.label ? props.label : ''}\n        aria-hidden={props.label ? 'false' : 'true'}\n    >\n        {props.symbol}\n    </span>\n);\n\nexport default Emoji;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Emoji from './emoji';\n\nfunction App() {\n\n  function capitalizeFirstLetter(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }\n\n  function selectRandom(data, max = 100) {\n    const randomNum = Math.floor(Math.random() * Math.floor(max));\n    const chosenWord = data[randomNum].word;\n    return capitalizeFirstLetter(chosenWord);\n  }\n  \n  function renderResults(data) {\n    // debugger;\n    const listContainer = document.querySelector('.App-result__container');\n    for (let key of Object.keys(data)) {\n      const element = document.createElement('li');\n      element.classList.add('App-result__item');\n      element.innerText = data[key];\n      listContainer.appendChild(element);\n    }; \n  }\n\n  function searchAcronym(e) {\n    e.preventDefault();\n\n    const apiUrl = 'https://api.datamuse.com/words?sp=';\n\n    const resultContainer = document.querySelector('.App-result');\n    resultContainer.innerHTML = '';\n    resultContainer.classList.add('hidden');\n    const listContainer = document.createElement('ul');\n    listContainer.classList.add('App-result__container');\n    resultContainer.appendChild(listContainer);\n    const form = document.querySelector('.App-form');\n    const formField = form.querySelector('#acronym');\n    const word = formField.value;\n    const solution = [];\n\n    if (word && word.length > 0) {\n      const acronymArray = word.split('');\n      acronymArray.forEach((letter, key) => {\n        fetch(`${apiUrl}${letter}*`)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            const name = `result-${key}`;\n            const selected = selectRandom(result);\n            solution[name] = selected;\n          },\n          (error) => {\n            console.error(error);\n          }\n        )\n      });\n      setTimeout(() => { renderResults(solution); }, 1000);\n      resultContainer.classList.remove('hidden');\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Acronie <Emoji symbol='ðŸ¤”' label='thinking face'/></h1>\n        <p>Acronie will tell you what your acronym stands for...</p>\n        <p>Or at least try <Emoji symbol='ðŸ˜œ' label='winking face with tongue' /></p>\n      </header>\n      <form className='App-form'>\n        <label className='App-form__label' htmlFor='App-form__field'>Acronym:</label>\n        <input type='text' className='App-form__field' id='acronym' name='acronym' />\n        <button className='App-form__submit' onClick={searchAcronym}>What does it mean?</button>\n      </form>\n      <div className=\"App-result hidden\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}